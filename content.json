{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"about","text":"个人的一个笔记存放点","link":"/about/index.html"}],"posts":[{"title":"哲学","text":"超兽武装夜凌云 强者战胜弱者本就是天道，我并不想逆天而行，如果没有强者的统治，这个世界将是一片混乱 善恶不分？这个世界有善恶吗？那我问你，什么是善，什么是恶？在我看来是善的东西，在你们看来就是恶的，这个世界根本就没有绝对的善恶，就算有！也是强者通过武力，来向弱者证明的 我们最大的敌人其实就是我们自己，强就是弱，弱就是强，你越强其实就越危险，因为所有人都会对付你，都会留意你，包括站在你对面的敌人，和站在你身后的自己人！ 你如果想击倒一个人最好的办法，就是让他自己心里觉得恐惧，那么用不着你出手，他自己就先将自己击倒。 我们飞翔得越高我们在那些不能飞翔的人的眼中就越是渺小。 冥王 当你有爱去保护羊群，那么对于狼这种爱心就是毁灭，因为它们会因此而活活饿死 这个世界本就如此，不是狼死就是羊死，不是弱小的狼被饿死，就是弱小的羊被咬死 或许这世界太过残酷，然而却因此而美丽！ 自从厌倦于追寻，我已学会一觅即中，自从一股逆风袭来，我已能抗御八面来风，驾舟而行。 在天堂和地狱之间没有我们选择的权利，只有我们被选择的命运。 我的内心就像树一样，树越是向往高处的光亮，它的根就越要向下，向泥土，向黑暗的深处。 当我到达高处，便发觉自己总是孤独的，无人同我说话，孤寂的严冬令我发抖，我在高处究竟意欲何为。 美，只不过是一瞬间的感觉，只有真实才是永恒的，而真实绝不会美！ 鲸 鲨 王 人的欲望，就如同高山滚石一般，一旦开始，就再也停不下来了。除非这些石头原本就在山谷的底部。 获得自由的代价总是昂贵的，总是要经历无数的战争，无数的牺牲才可以换取的。 这世界上有一种人（奴隶）虽然是人，但他们从来就没有过过属于自己的生活，他们的一切都遵照他人的意思而活，这种人千古以前就有，千古以后还是不会消失，这种人永远都得不到自由，因为他们的心灵早就被枷锁（奴性）禁锢了。 苗条俊 这个世界、强弱可以互换，黑白可以颠倒，族群间的实力也会此消佊长 所以和平只能是短暂的，我们的敌人和朋友，也都是短暂的，这个世界根本不可能实现永恒和平 但正因为如此，世界也才需要我们超兽战士，我们超兽战士使命就是维持宇宙间的平衡 玄易子 已有的事，后必再有，已行的事，后必再行。 人类对自己不懂的事情总会觉得有些害怕 雪皇 爱和恨最大的不同，能使人对未来充满希望，而恨却只能让人想到过去那些痛苦的往事 爱与恨在一念之间，而你心中的仇恨，已经蒙蔽了你的双眼 仇恨的意义：1. 会让一个单纯的人变得复杂1. 他会让人学会在现实的社会中生存1. 会使人变得更强大，不再被欺负1. 激发人更想要活下去的欲望 龙莹 天地本就无情，若见有情，天早已荒，地早已老","link":"/2022/03/10/%E5%93%B2%E5%AD%A6/"},{"title":"文本三剑客-AWK-详解","text":"AWK基础应用一、Awk简介awk是一门编程语言同时也是数据处理引擎 创造者：Aho、Weinberger、Kernighan 基于模式匹配检查输入文本，逐行处理并输出 通常用在Shell脚本中，获取指定的数据 单独用时，可对文本数据做统计 二、命令格式解析格式11、awk [选项] ‘[条件]{编辑指令} ‘ 文件… 2、举例说明 12345awk -F&quot;:&quot; '{print $1,$3}' /etc/passwd |head -3root 0daemon 1bin 2 格式21、前置命令 | awk [选项] ‘[条件]{编辑指令}’ 1cat /etc/passwd | awk 'pattern{commands}'' 2、举例说明 1234cat /etc/shadow | awk -F&quot;:&quot; '{print $1,$2}' |head -3root !daemon *bin * 五、Awk常用选项 选项 用途 -f 指定一个awk脚本 -F 指定分隔符 -v 传递变量 -V 查看版本信息 三、AWK变量内置变量 变量 用途 $0 整行内容 $1-$n 当前行的第1-n个字段 NF (Number Field) 当前行的字段个数,也就是有多少列 NR (Number Row) 当前行的行号,从1开始 FNR 当文件处理时,每个文件行号单独计数 FS (File Separator) 输出字段分隔符。不指定默认以空格或者tab分割 RS (Row Separator) 输入行分隔符。默认回车 OFS 输出字段分隔符。默认空格 ORS 输出行分隔符。默认为回车 FILENAME 当前输入的文件名字 ARGC 当前命令行参数个数 ARGV 当前命令行参数数组 RS、FS、ORS 、OFS1.phone文件里面 123cat phone匪警|110-火警|119-急救中心|120-交通故障|122-天气预报|12121 2.指定输入行的分隔符 1234567cat phone |awk 'BEGIN{RS=&quot;-&quot;;FS=&quot;|&quot;}{print $1&quot;_&quot;$2}END{}'匪警_110火警_119急救中心_120交通故障_122天气预报_12121 3.指定输出行 1234cat phone |awk 'BEGIN{RS=&quot;-&quot;;FS=&quot;|&quot;;ORS=&quot;&amp;&quot;}{print $1&quot;_&quot;$2}END{}'匪警_110&amp;火警_119&amp;急救中心_120&amp;交通故障_122&amp;天气预报_12121 4.字段间的分隔符，print之间用逗号隔开 123cat phone |awk 'BEGIN{RS=&quot;-&quot;;FS=&quot;|&quot;;ORS=&quot;&amp;&quot;;OFS=&quot;_&quot;}{print $1,$2}END{}'匪警_110&amp;火警_119&amp;急救中心_120&amp;交通故障_122&amp;天气预报_12121 ARGC1.这里输出结果是3，awk本身算一个，文件名各算一个 123awk '{print ARGC}'' /etc/passwd /etc/shadow3 NR、FNR、FILENAME、NF1.统计/etc/shadow有多少行 123awk '{print FNR}' /etc/passwd41 2.统计/etc/passwd /etc/group两个连续文件的里面的行数 如果使用FNR发现统计的是各自文件的行数 1awk '{print FNR}' /etc/passwd /etc/group 使用NR就可以将多个文件行数累计起来 1awk '{print NR}' /etc/passwd /etc/group 3.把一个文件按–&gt;行号：文件名–&gt;此行内容 这种格式输出 4.统计每行有多少个字段 自定义变量引入 刚刚学的我们知道，awk调用内置变量时，不需要在前面加$符号。 那怎么调用系统shell的变量呢? 我现在来试试，变量前面不加$，结果是输出为空行 一个$是输出当前行的所有内容，那这里是在title前添加$会输出怎样的结果呢？ 加了其它的任意字符也是可以的，说明$后跟任意非具有特定意义的字符会当$0使用 3.回到刚才的问题，那如何引用外部的shell变量呢? 方式一1.可以使用-v参数 格式：变量名=$shell的变量名 多个用变量,隔开 方式二1.先设置成全局变量，然后用awk的ENVIRON数组引用它 举例1.输出当前登录用户在password中的记录，print后面可以什么都不加,默认就是$0 2.输出用户yoyo在/etc/shadow中的密码记录 四、AWK处理动作动作类型行前处理：BEGIN{} 读入第行文本之前执行 一般用来初始化操作 逐行处理：{} 逐行读入文本执行相应的处理 是最常见的编辑指令块 在所有行后处理：END{} 处理完最后一行文件之后执行 一般用来输出处理结果 类型小结 动作 作用 BEGIN{} 行前处理 {} 逐行处理 END{} 行后处理 这3个动作，它们可以单独使用也可以同时一起使用 举例说明1.预处理不需要数据文件 123awk 'BEGIN{a=99;print a+1}'100 2.统计使用bash的用户个数 123awk 'BEGIN{x=0}/bash$/{x++}END{print x}' /etc/passwd3 3.预处理时，行数为0，全部处理完以后，行数为已读入文本的行数 1234awk 'BEGIN{print NR}END{print NR}' /etc/passwd041 六、格式化输出格式说明 %s 打印字符串 %d 打印十进制数 %f 打印浮点数 %x 打印十六进制数 %o 打印八进制数 %e 打印数字的科学计数法形式 %c 打印单个字符的ASCII码 修饰字符 - 左对齐 + 右对齐 # 在8进制前面显示0，16进制前面显示0x 举例使用输出/etc/passwd下用户名与十六进制的UID 格式：printf “%d,%\\#x…”,参数1.参数n.. 1awk -F: '{printf &quot;%-20s %-#x\\n&quot;,$1,$3 }' /etc/passwd|head -3 输出结果： 123root 0daemon 0x1bin 0x2 七、AWK处理条件处理条件概述所有的行全部处理并输出吗？ 怎么限制处理的条件？ 根据多个条件来处理指定的行？ 条件表现形式格式回顾 awk [选项] ‘[条件]{编辑指令}’ 文件… 条件的表现形式？ 正则表达式 数值/字符串比较 逻辑比较 运算符 正则表达式语法： /正则表达式/ ~ 匹配、! ~不匹配 1.匹配/etc/passwd文件行中含有以ro开头的用户记录 1awk -F&quot;:&quot; '/^ro/{print}' /etc/passwd 2.列出第7个字段不以bash结尾的用户名、登录shell 1awk -F&quot;:&quot; '$7!~/bash$/{printf &quot;%-20s %s\\n&quot;,$1,$7}' /etc/passwd 运算符匹配关系运算符 符号 说明 &lt; 小于 &gt; 大于 &lt;= 小于等于 &gt;= 大于等于 == 等于 != 不等于 ~ 匹配正则表达式 !~ 不匹配正则表达式 1.输出第2行用户记录 1awk 'NR==2{print}' /etc/passwd 2.输出第2列不是x的用户记录，可以用它来判断空密码 1awk -F&quot;:&quot; '$2!=&quot;x&quot;' /etc/passwd 逻辑运算符 符号 说明 &amp;&amp; 与 || 或 ! 非 1.输出系统中uid小于100的用户 1awk -F&quot;:&quot; '$3&lt;100{printf &quot;%-10s%s\\n&quot;,$1,$3}' /etc/passwd 2.输出系统中长度大于3位小于5位的用户名，并且uid是2位数的 1awk -F&quot;:&quot; '$1~/^[a-zA-Z]{3,5}$/ &amp;&amp; $3&lt;100 {print}' /etc/passwd 3.输出系统中uid大于等于50并且此用户可以登录系统 1awk -F&quot;:&quot; '$3&gt;=50 &amp;&amp; !/nologin$/{printf &quot;%-10s %s\\n&quot;,$1,$3}' /etc/passwd 变量的运算运算符号 符号 说明 + 加 - 减 * 乘 / 除 % 取余 ^或** 乘方 ++x 先自增1 x++ 后自增1 举例练习1.计算/var/log/message中的空白行的数量 1awk 'BEGIN{x=0}/^$/{x++}END{printf &quot;空白行数量:%d\\n&quot;,x}' /var/log/messages 2.算出它们的平均分,并且从小到大进行排序 1)、grade.txt文件内容 喜羊羊 80 90 100 96 路飞 11 12 13 14 鸣人 30 60 90 66 沧桑 99 66 33 100 小朋友 6 5 4 3 暖羊羊 50 30 60 70 灰太狼 100 99 98 100 2)、编写awk命令 123456awk 'BEGIN{FS=&quot; &quot;;print &quot;姓名\\t计算机\\t物理\\t天文\\t地理\\t平均分&quot;}{avg=($2+$3+$4)/4;printf &quot;%-3s\\t %s \\t%s \\t%s \\t%s \\t%.2f\\n&quot;,$1,$2,$3,$4,$5,avg}' grade.txt | sort -k6 -n 3)、运行结果 4）、算出它们所有学科的总成绩 1234567891011121314151617awk 'BEGIN{ FS=&quot; &quot;; print &quot;姓名\\t天文\\t地理\\t军事\\t物理\\t总分&quot;}{ sum=$2+$3+$4+$5 s_Sum+=sum s_Astronomy+=$2 s_Geography+=$3 s_Military+=$4 s_Physical+=$5 printf &quot;%s\\t %s\\t %s\\t %s\\t %s\\t %s\\t\\n&quot;,$1,$2,$3,$4,$5,sum}END{ print &quot;---------------------------------------------&quot; printf &quot;总和\\t %d\\t %d\\t %d\\t %d\\t %d\\t\\n&quot;,s_Astronomy,s_Geography,s_Military,s_Physical,s_Sum}' grade.txt | sort -k6 -n 5)、运行结果 AWK高级应用一、流程控制条件语句语法格式单分支 123if(条件){ 动作} 双分支 123456if(条件){ 动作1}else{ 动作2} 多分支 12345678910if(条件表达式){ 动作1}else if(条件表达式){ 动作2}...else{ 动作N} 举例应用1.找出系统用户中uid 50 &gt; uid &gt; 100并且用户名的长度小于等于5 1awk -F&quot;:&quot; '$1~/^.{1,5}$/{if ($3 &gt;50 &amp;&amp; $3 &lt;100)print }' /etc/passwd 循环语句while 循环语法格式： 1234while(条件表达式){ 动作} 举例应用： 1.从1累加到100 123456789BEGIN{ i=1;sum=0; while(i&lt;=100) { sum+=i; i++; } print sum;} 2.统计/etc/passwd文件内root出现的次数 利用-F [:/]，表示分隔符为:或者/ 1awk -F &quot;[:/]&quot; '{i=1}{ while(i&lt;NF){ if($i~/root/){j++};i++ } }END{print j}' /etc/passwd 3.此操作等效上述操作 12str=$(cat /etc/passwd)echo $str | awk -F &quot;root&quot; '{print NF-1}' do while循环语法格式： 123do{ 动作} while(条件表达式) 举例应用： 12345678910awk 'BEGIN{ i=1; sum=0; do { sum+=i; i++; } while(i&lt;=100); print sum}' for循环语法格式： 1234for(初始化计数器;计数器测试;计数器变更){ 动作} 举例应用： 12345678awk 'BEGIN{ sum=0; for(i=1;i&lt;=100;i++) { sum+=i; } print sum}' 其他控制语句常用的中断、退出等awk指令 关键字 含义 break 结束当前的循环体 continue 中止本次循环，转入下一次循环 next 跳过当前行，读入下一行文本开始处理 exit 结束文本读入，转入END{}执行如果没有END{}则直接退出awk处理操作 1.输出奇数行的用户记录 1awk -F&quot;:&quot; 'NR%2==0{next}{printf &quot;%-10d %s\\n&quot;,NR,$1}' /etc/passwd 2.从1~100偶数相加的和 1awk 'BEGIN{sum=0;for(i=1;i&lt;=100;i++){ if (i%2==0)continue; sum+=i;} print sum}' 二、Awk数组定义数组 格式：数组名[下标] = 元素值 1.定义索引数组 12345678910awk 'BEGIN{ array[0]=&quot;haha&quot;; array[1]=&quot;lala&quot;; array[2]=&quot;yaya&quot;; # 遍历数组 for(key in array) { print key,array[key] }}' 2.定义关联数组 1234567891011awk 'BEGIN{ array[&quot;blue&quot;]=&quot;sky&quot;; array[&quot;red&quot;]=&quot;hat&quot;; array[&quot;green&quot;]=&quot;grass&quot;; #遍历数组 for(key in array) { print key,array[key] }}' 使用数组 格式：数组名[下标] 遍历数组 用法：for(变量 in 数组名){print 数组名[变量]} 举例使用1.去除文件中重复的行 1awk '!a[$0]++' /etc/profile a[$0]++ 第1次就是0，0是假，取反后就是真，默认就会输出 第2次的时候已经变成1了，1取反就成了假，所以就不会再输出 2.列出/etc/passwd中的登录shell种类 1234567awk -F&quot;:&quot; '!a[$7]++{print $7}' /etc/passwd/bin/bash/sbin/nologin/bin/sync/sbin/shutdown/sbin/halt 综合案例1.自动生成日志脚本 1234567891011121314151617#!/bin/bashINDEX=1echo &quot;按CTRL+C停止生成&quot;while :do for user in &quot;喜羊羊&quot; &quot;懒羊羊&quot; &quot;沸羊羊&quot; &quot;慢羊羊&quot; &quot;灰太狼&quot; &quot;武大郎&quot; do COUNT=$RANDOM IN_NUM=$[RANDOM%999] FAIL_NUM=$[COUNT-IN_NUM] echo &quot;`date '+%Y-%m-%d %H:%M:%S'` $INDEX 处理人:$user insert $COUNT records into database:product table:detail, insert $IN_NUM records successfully,failed $FAIL_NUM records&quot; &gt;&gt; ./db.log.`date +%Y%m%d` let INDEX++ donedone 2.生成结果示例 3.编写一个log.awk脚本统计出每个用户查询的记录数，成功与失败的数量 1234567891011121314151617181920BEGIN{print &quot;用户\\t记录数\\t成功\\t失败\\t&quot;}{ split($4,arr,&quot;:&quot;); user=arr[2]; total=$6; ok=$12; no=$15; users[user][&quot;total&quot;]+=total; users[user][&quot;ok&quot;]+=ok; users[user][&quot;no&quot;]+=no;}END{ for(u in users) { printf &quot;%s\\t%d\\t%d\\t%d\\n&quot;,u,users[u][&quot;total&quot;],users[u][&quot;ok&quot;],users[u][&quot;no&quot;] }} 4.运行结果","link":"/2022/03/20/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2-AWK/"},{"title":"文本三剑客-AWK-练习","text":"AWK—练习基础1、提取本机的IP地址 1ifconfig |grep inet | awk '{print $2}' 2、提取根分区使用率 方法1： 1df -hT / | sed -n '$p' |awk '{print $6}' 方法2： 1df -hT | awk '$7~/^\\/$/{print $6}' 3、格式化输出/etc/passwd文件 只显示用户名、UID、宿主目录3列 给每列加标题，最后输出处理的总行数 1234cat /etc/passwd |awk -F&quot;:&quot; 'BEGIN { printf &quot;%-20s %-6s %-20s\\n&quot;,&quot;USER&quot;,&quot;UID&quot;,&quot;HOME&quot; } {printf &quot;%-20s %-6s %-20s\\n&quot;,$1,$3,$6} END{print &quot;total line:&quot;,NR}' 4.列出UID间于901~905的用户详细信息 5.找出UID与GID不同的用户，列出用户名及对应的UID、GID。 6.输出/etc/hosts文件内以127或192开头的记录 7.列出100以内整数中7的倍数或是含7的数 12seq 100 | awk 'NR % 7 == 0 || NR~/7/' seq 100 | awk '$0 % 7 == 0 || $0~/7/' 9.统计/etc/passwd文件中各种shell出现的次数 进阶1.编写getpwd.sh脚本的任务要求如下： 分析出使用bash/sh/zsh作为登录Shell的本地用户 列出这些用户的shadow密码记录 按每行”用户名 — 密码记录”保存结果 12345678910# 获取以bash/sh/zsh为shell用户列表users=$(awk -F&quot;:&quot; '$7~/(bash|sh|zsh)$/{print $1}' /etc/passwd)# 遍历用户列表for user in $usersdo # 过滤出对应用户的密码并输出 awk -F&quot;:&quot; -v usr=$user '$1==usr &amp;&amp; $2!=&quot;&quot; &amp;&amp; $2!=&quot;!!&quot; {printf &quot;%-12s %s\\n&quot;,usr,$2}END{}' /etc/shadowdone 2.统计网络连接信息中tcp和udp远程地址及对应的连接数 1)、实现命令 12345678910111213141516netstat -naptu | awk ' # 匹配以tcp或udp开头的行 $1~/(tcp|udp)/{ # $5字段为远程连接IP,使用:分隔,第1个为ip,第2个为端口 n=split($5,arr,&quot;:&quot;); # 判断切割后的数目是不是2 if(n==2){ # 将ip当做键进行自增 ips[arr[1]]++; } }END{ # 末尾的时候输出ip及对应出现的次数 printf &quot;%-12s 出现次数\\n&quot;,&quot;远程地址&quot;; for(ip in ips){ printf &quot;%-16s %-5s\\n&quot;,ip,ips[ip]}; }' 2)、运行结果","link":"/2022/03/20/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2-AWK-%E7%BB%83%E4%B9%A0/"}],"tags":[{"name":"超兽武装","slug":"超兽武装","link":"/tags/%E8%B6%85%E5%85%BD%E6%AD%A6%E8%A3%85/"},{"name":"文本处理","slug":"文本处理","link":"/tags/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"}],"categories":[{"name":"哲学","slug":"哲学","link":"/categories/%E5%93%B2%E5%AD%A6/"},{"name":"运维","slug":"运维","link":"/categories/%E8%BF%90%E7%BB%B4/"}]}